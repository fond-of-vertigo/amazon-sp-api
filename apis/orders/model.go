package orders

import (
	"encoding/json"
	"fmt"
	"github.com/fond-of-vertigo/amazon-sp-api/apis"
	"github.com/fond-of-vertigo/amazon-sp-api/constants"
	"net/url"
	"strconv"
	"strings"
)

type ResponsibleParty string
type DeemedResellerCategory string
type Model string

const (
	// MarketplaceFacilitator Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
	MarketplaceFacilitator Model = "MarketplaceFacilitator"

	// IOSS (Import one stop shop). The item being purchased is not held in the EU for shipment.
	IOSS DeemedResellerCategory = "IOSS"
	// UOSS (Union one stop shop). The item being purchased is held in the EU for shipment.
	UOSS DeemedResellerCategory = "UOSS"

	AmazonServicesInc ResponsibleParty = "Amazon Services, Inc."
)

// Address The shipping address for the order.
type Address struct {
	// The name.
	Name string `json:"Name"`
	// The street address.
	AddressLine1 *string `json:"AddressLine1,omitempty"`
	// Additional street address information, if required.
	AddressLine2 *string `json:"AddressLine2,omitempty"`
	// Additional street address information, if required.
	AddressLine3 *string `json:"AddressLine3,omitempty"`
	// The city
	City *string `json:"City,omitempty"`
	// The county.
	County *string `json:"County,omitempty"`
	// The district.
	District *string `json:"District,omitempty"`
	// The state or region.
	StateOrRegion *string `json:"StateOrRegion,omitempty"`
	// The municipality.
	Municipality *string `json:"Municipality,omitempty"`
	// The postal code.
	PostalCode *string `json:"PostalCode,omitempty"`
	// The country code. A two-character country code, in ISO 3166-1 alpha-2 format.
	CountryCode *string `json:"CountryCode,omitempty"`
	// The phone number. Not returned for Fulfillment by Amazon (FBA) orders.
	Phone *string `json:"Phone,omitempty"`
	// The address type of the shipping address.
	AddressType *string `json:"AddressType,omitempty"`
}

// AutomatedShippingSettings Contains information regarding the Shipping Settings Automation program, such as whether the order's shipping settings were generated automatically, and what those settings are.
type AutomatedShippingSettings struct {
	// When true, this order has automated shipping settings generated by Amazon. This order could be identified as an SSA order.
	HasAutomatedShippingSettings *bool `json:"HasAutomatedShippingSettings,omitempty"`
	// Auto-generated carrier for SSA orders.
	AutomatedCarrier *string `json:"AutomatedCarrier,omitempty"`
	// Auto-generated ship method for SSA orders.
	AutomatedShipMethod *string `json:"AutomatedShipMethod,omitempty"`
}

// BuyerCustomizedInfoDetail Buyer information for custom orders from the Amazon Custom program.
type BuyerCustomizedInfoDetail struct {
	// The location of a zip file containing Amazon Custom data.
	CustomizedURL *string `json:"CustomizedURL,omitempty"`
}

// BuyerInfo Buyer information.
type BuyerInfo struct {
	// The anonymized email address of the buyer.
	BuyerEmail *string `json:"BuyerEmail,omitempty"`
	// The buyer name or the recipient name.
	BuyerName *string `json:"BuyerName,omitempty"`
	// The county of the buyer.
	BuyerCounty  *string       `json:"BuyerCounty,omitempty"`
	BuyerTaxInfo *BuyerTaxInfo `json:"BuyerTaxInfo,omitempty"`
	// The purchase order (PO) number entered by the buyer at checkout. Returned only for orders where the buyer entered a PO number at checkout.
	PurchaseOrderNumber *string `json:"PurchaseOrderNumber,omitempty"`
}

// BuyerRequestedCancel Information about whether or not a buyer requested cancellation.
type BuyerRequestedCancel struct {
	// When true, the buyer has requested cancellation.
	IsBuyerRequestedCancel *bool `json:"IsBuyerRequestedCancel,omitempty"`
	// The reason that the buyer requested cancellation.
	BuyerCancelReason *string `json:"BuyerCancelReason,omitempty"`
}

// BuyerTaxInfo Tax information about the buyer.
type BuyerTaxInfo struct {
	// The legal name of the company.
	CompanyLegalName *string `json:"CompanyLegalName,omitempty"`
	// The country or region imposing the tax.
	TaxingRegion *string `json:"TaxingRegion,omitempty"`
	// A list of tax classifications that apply to the order.
	TaxClassifications []TaxClassification `json:"TaxClassifications,omitempty"`
}

// BuyerTaxInformation Contains the business invoice tax information. Available only in the TR marketplace.
type BuyerTaxInformation struct {
	// Business buyer's company legal name.
	BuyerLegalCompanyName *string `json:"BuyerLegalCompanyName,omitempty"`
	// Business buyer's address.
	BuyerBusinessAddress *string `json:"BuyerBusinessAddress,omitempty"`
	// Business buyer's tax registration ID.
	BuyerTaxRegistrationId *string `json:"BuyerTaxRegistrationId,omitempty"`
	// Business buyer's tax office.
	BuyerTaxOffice *string `json:"BuyerTaxOffice,omitempty"`
}

// EasyShipShipmentStatus The status of the Amazon Easy Ship order. This property is included only for Amazon Easy Ship orders.
type EasyShipShipmentStatus string

// List of EasyShipShipmentStatus
const (
	EasyShipPendingSchedule   EasyShipShipmentStatus = "PendingSchedule"
	EasyShipPendingPickUp     EasyShipShipmentStatus = "PendingPickUp"
	EasyShipPendingDropOff    EasyShipShipmentStatus = "PendingDropOff"
	EasyShipLabelCanceled     EasyShipShipmentStatus = "LabelCanceled"
	EasyShipPickedUp          EasyShipShipmentStatus = "PickedUp"
	EasyShipDroppedOff        EasyShipShipmentStatus = "DroppedOff"
	EasyShipAtOriginFc        EasyShipShipmentStatus = "AtOriginFC"
	EasyShipAtDestinationFc   EasyShipShipmentStatus = "AtDestinationFC"
	EasyShipDelivered         EasyShipShipmentStatus = "Delivered"
	EasyShipRejectedByBuyer   EasyShipShipmentStatus = "RejectedByBuyer"
	EasyShipUndeliverable     EasyShipShipmentStatus = "Undeliverable"
	EasyShipReturningToSeller EasyShipShipmentStatus = "ReturningToSeller"
	EasyShipReturnedToSeller  EasyShipShipmentStatus = "ReturnedToSeller"
	EasyShipLost              EasyShipShipmentStatus = "Lost"
	EasyShipOutForDelivery    EasyShipShipmentStatus = "OutForDelivery"
	EasyShipDamaged           EasyShipShipmentStatus = "Damaged"
)

// AllowedEasyShipShipmentStatusEnumValues are all allowed values of EasyShipShipmentStatus enum
var AllowedEasyShipShipmentStatusEnumValues = []EasyShipShipmentStatus{
	"PendingSchedule",
	"PendingPickUp",
	"PendingDropOff",
	"LabelCanceled",
	"PickedUp",
	"DroppedOff",
	"AtOriginFC",
	"AtDestinationFC",
	"Delivered",
	"RejectedByBuyer",
	"Undeliverable",
	"ReturningToSeller",
	"ReturnedToSeller",
	"Lost",
	"OutForDelivery",
	"Damaged",
}

func (v *EasyShipShipmentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EasyShipShipmentStatus(value)
	for _, existing := range AllowedEasyShipShipmentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EasyShipShipmentStatus", value)
}

// ElectronicInvoiceStatus The status of the electronic invoice.
type ElectronicInvoiceStatus string

// List of ElectronicInvoiceStatus
const (
	ElectronicInvoiceNotRequired ElectronicInvoiceStatus = "NotRequired"
	ElectronicInvoiceNotFound    ElectronicInvoiceStatus = "NotFound"
	ElectronicInvoiceProcessing  ElectronicInvoiceStatus = "Processing"
	ElectronicInvoiceErrored     ElectronicInvoiceStatus = "Errored"
	ElectronicInvoiceAccepted    ElectronicInvoiceStatus = "Accepted"
)

// AllowedElectronicInvoiceStatusEnumValues are all allowed values of ElectronicInvoiceStatus enum
var AllowedElectronicInvoiceStatusEnumValues = []ElectronicInvoiceStatus{
	"NotRequired",
	"NotFound",
	"Processing",
	"Errored",
	"Accepted",
}

func (v *ElectronicInvoiceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ElectronicInvoiceStatus(value)
	for _, existing := range AllowedElectronicInvoiceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ElectronicInvoiceStatus", value)
}

// FulfillmentInstruction Contains the instructions about the fulfillment like where should it be fulfilled from.
type FulfillmentInstruction struct {
	// Denotes the recommended sourceId where the order should be fulfilled from.
	FulfillmentSupplySourceId *string `json:"FulfillmentSupplySourceId,omitempty"`
}

// GetOrderAddressResponse The response schema for the getOrderAddress operation.
type GetOrderAddressResponse struct {
	Payload *OrderAddress `json:"payload,omitempty"`
	// A list of error responses returned when a request is unsuccessful.
	Errors []apis.Error `json:"errors,omitempty"`
}

// GetOrderBuyerInfoResponse The response schema for the getOrderBuyerInfo operation.
type GetOrderBuyerInfoResponse struct {
	Payload *OrderBuyerInfo `json:"payload,omitempty"`
	// A list of error responses returned when a request is unsuccessful.
	Errors []apis.Error `json:"errors,omitempty"`
}

// GetOrderItemsBuyerInfoResponse The response schema for the getOrderItemsBuyerInfo operation.
type GetOrderItemsBuyerInfoResponse struct {
	Payload *OrderItemsBuyerInfoList `json:"payload,omitempty"`
	// A list of error responses returned when a request is unsuccessful.
	Errors []apis.Error `json:"errors,omitempty"`
}

// GetOrderItemsResponse The response schema for the getOrderItems operation.
type GetOrderItemsResponse struct {
	Payload *OrderItemsList `json:"payload,omitempty"`
	// A list of error responses returned when a request is unsuccessful.
	Errors []apis.Error `json:"errors,omitempty"`
}

// GetOrderRegulatedInfoResponse The response schema for the getOrderRegulatedInfo operation.
type GetOrderRegulatedInfoResponse struct {
	Payload *OrderRegulatedInfo `json:"payload,omitempty"`
	// A list of error responses returned when a request is unsuccessful.
	Errors []apis.Error `json:"errors,omitempty"`
}

// GetOrderResponse The response schema for the getOrder operation.
type GetOrderResponse struct {
	Payload *Order `json:"payload,omitempty"`
	// A list of error responses returned when a request is unsuccessful.
	Errors []apis.Error `json:"errors,omitempty"`
}

// GetOrdersResponse The response schema for the getOrders operation.
type GetOrdersResponse struct {
	Payload *OrdersList `json:"payload,omitempty"`
	// A list of error responses returned when a request is unsuccessful.
	Errors []apis.Error `json:"errors,omitempty"`
}

// ItemBuyerInfo A single item's buyer information.
type ItemBuyerInfo struct {
	BuyerCustomizedInfo *BuyerCustomizedInfoDetail `json:"BuyerCustomizedInfo,omitempty"`
	GiftWrapPrice       *Money                     `json:"GiftWrapPrice,omitempty"`
	GiftWrapTax         *Money                     `json:"GiftWrapTax,omitempty"`
	// A gift message provided by the buyer.
	GiftMessageText *string `json:"GiftMessageText,omitempty"`
	// The gift wrap level specified by the buyer.
	GiftWrapLevel *string `json:"GiftWrapLevel,omitempty"`
}

// MarketplaceTaxInfo Tax information about the marketplace.
type MarketplaceTaxInfo struct {
	// A list of tax classifications that apply to the order.
	TaxClassifications []TaxClassification `json:"TaxClassifications,omitempty"`
}

// Money The monetary value of the order.
type Money struct {
	// The three-digit currency code. In ISO 4217 format.
	CurrencyCode *string `json:"CurrencyCode,omitempty"`
	// The currency amount.
	Amount *string `json:"Amount,omitempty"`
}

// Order Order information.
type Order struct {
	// An Amazon-defined order identifier, in 3-7-7 format.
	AmazonOrderId string `json:"AmazonOrderId"`
	// A seller-defined order identifier.
	SellerOrderId *string `json:"SellerOrderId,omitempty"`
	// The date when the order was created.
	PurchaseDate string `json:"PurchaseDate"`
	// The date when the order was last updated.  __Note__: LastUpdateDate is returned with an incorrect date for orders that were last updated before 2009-04-01.
	LastUpdateDate string `json:"LastUpdateDate"`
	// The current order status.
	OrderStatus string `json:"OrderStatus"`
	// Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN).
	FulfillmentChannel *string `json:"FulfillmentChannel,omitempty"`
	// The sales channel of the first item in the order.
	SalesChannel *string `json:"SalesChannel,omitempty"`
	// The order channel of the first item in the order.
	OrderChannel *string `json:"OrderChannel,omitempty"`
	// The shipment service level of the order.
	ShipServiceLevel *string `json:"ShipServiceLevel,omitempty"`
	OrderTotal       *Money  `json:"OrderTotal,omitempty"`
	// The number of items shipped.
	NumberOfItemsShipped *int32 `json:"NumberOfItemsShipped,omitempty"`
	// The number of items unshipped.
	NumberOfItemsUnshipped *int32 `json:"NumberOfItemsUnshipped,omitempty"`
	// A list of payment execution detail items.
	PaymentExecutionDetail []PaymentExecutionDetailItem `json:"PaymentExecutionDetail,omitempty"`
	// The payment method for the order. This property is limited to Cash On Delivery (COD) and Convenience Store (CVS) payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem object, we recommend using the PaymentMethodDetails property to get payment method information.
	PaymentMethod *string `json:"PaymentMethod,omitempty"`
	// A list of payment method detail items.
	PaymentMethodDetails []string `json:"PaymentMethodDetails,omitempty"`
	// The identifier for the marketplace where the order was placed.
	MarketplaceId *string `json:"MarketplaceId,omitempty"`
	// The shipment service level category of the order.  Possible values: Expedited, FreeEconomy, NextDay, SameDay, SecondDay, Scheduled, Standard.
	ShipmentServiceLevelCategory *string                 `json:"ShipmentServiceLevelCategory,omitempty"`
	EasyShipShipmentStatus       *EasyShipShipmentStatus `json:"EasyShipShipmentStatus,omitempty"`
	// Custom ship label for Checkout by Amazon (CBA).
	CbaDisplayableShippingLabel *string `json:"CbaDisplayableShippingLabel,omitempty"`
	// The type of the order.
	OrderType *string `json:"OrderType,omitempty"`
	// The start of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.  __Note__: EarliestShipDate might not be returned for orders placed before February 1, 2013.
	EarliestShipDate *string `json:"EarliestShipDate,omitempty"`
	// The end of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.  __Note__: LatestShipDate might not be returned for orders placed before February 1, 2013.
	LatestShipDate *string `json:"LatestShipDate,omitempty"`
	// The start of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.
	EarliestDeliveryDate *string `json:"EarliestDeliveryDate,omitempty"`
	// The end of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status.
	LatestDeliveryDate *string `json:"LatestDeliveryDate,omitempty"`
	// When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer.
	IsBusinessOrder *bool `json:"IsBusinessOrder,omitempty"`
	// When true, the order is a seller-fulfilled Amazon Prime order.
	IsPrime *bool `json:"IsPrime,omitempty"`
	// When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, see \"Premium Shipping Options\" in the Seller Central Help for your marketplace.
	IsPremiumOrder *bool `json:"IsPremiumOrder,omitempty"`
	// When true, the order is a GlobalExpress order.
	IsGlobalExpressEnabled *bool `json:"IsGlobalExpressEnabled,omitempty"`
	// The order ID value for the order that is being replaced. Returned only if IsReplacementOrder = true.
	ReplacedOrderId *string `json:"ReplacedOrderId,omitempty"`
	// When true, this is a replacement order.
	IsReplacementOrder *bool `json:"IsReplacementOrder,omitempty"`
	// Indicates the date by which the seller must respond to the buyer with an estimated ship date. Returned only for Sourcing on Demand orders.
	PromiseResponseDueDate *string `json:"PromiseResponseDueDate,omitempty"`
	// When true, the estimated ship date is set for the order. Returned only for Sourcing on Demand orders.
	IsEstimatedShipDateSet *bool `json:"IsEstimatedShipDateSet,omitempty"`
	// When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.
	IsSoldByAB *bool `json:"IsSoldByAB,omitempty"`
	// When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.
	IsIBA                          *bool    `json:"IsIBA,omitempty"`
	DefaultShipFromLocationAddress *Address `json:"DefaultShipFromLocationAddress,omitempty"`
	// The buyer's invoicing preference. Available only in the TR marketplace.
	BuyerInvoicePreference *string                 `json:"BuyerInvoicePreference,omitempty"`
	BuyerTaxInformation    *BuyerTaxInformation    `json:"BuyerTaxInformation,omitempty"`
	FulfillmentInstruction *FulfillmentInstruction `json:"FulfillmentInstruction,omitempty"`
	// When true, this order is marked to be picked up from a store rather than delivered.
	IsISPU *bool `json:"IsISPU,omitempty"`
	// When true, this order is marked to be delivered to an Access Point. The access location is chosen by the customer. Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup points operated by carriers.
	IsAccessPointOrder *bool               `json:"IsAccessPointOrder,omitempty"`
	MarketplaceTaxInfo *MarketplaceTaxInfo `json:"MarketplaceTaxInfo,omitempty"`
	// The seller’s friendly name registered in the marketplace.
	SellerDisplayName         *string                    `json:"SellerDisplayName,omitempty"`
	ShippingAddress           *Address                   `json:"ShippingAddress,omitempty"`
	BuyerInfo                 *BuyerInfo                 `json:"BuyerInfo,omitempty"`
	AutomatedShippingSettings *AutomatedShippingSettings `json:"AutomatedShippingSettings,omitempty"`
	// Whether the order contains regulated items which may require additional approval steps before being fulfilled.
	HasRegulatedItems       *bool                    `json:"HasRegulatedItems,omitempty"`
	ElectronicInvoiceStatus *ElectronicInvoiceStatus `json:"ElectronicInvoiceStatus,omitempty"`
}

// OrderAddress The shipping address for the order.
type OrderAddress struct {
	// An Amazon-defined order identifier, in 3-7-7 format.
	AmazonOrderId   string   `json:"AmazonOrderId"`
	ShippingAddress *Address `json:"ShippingAddress,omitempty"`
}

// OrderBuyerInfo Buyer information for an order.
type OrderBuyerInfo struct {
	// An Amazon-defined order identifier, in 3-7-7 format.
	AmazonOrderId string `json:"AmazonOrderId"`
	// The anonymized email address of the buyer.
	BuyerEmail *string `json:"BuyerEmail,omitempty"`
	// The buyer name or the recipient name.
	BuyerName *string `json:"BuyerName,omitempty"`
	// The county of the buyer.
	BuyerCounty  *string       `json:"BuyerCounty,omitempty"`
	BuyerTaxInfo *BuyerTaxInfo `json:"BuyerTaxInfo,omitempty"`
	// The purchase order (PO) number entered by the buyer at checkout. Returned only for orders where the buyer entered a PO number at checkout.
	PurchaseOrderNumber *string `json:"PurchaseOrderNumber,omitempty"`
}

// OrderItem A single order item.
type OrderItem struct {
	// The Amazon Standard Identification Number (ASIN) of the item.
	ASIN string `json:"ASIN"`
	// The seller stock keeping unit (SKU) of the item.
	SellerSKU *string `json:"SellerSKU,omitempty"`
	// An Amazon-defined order item identifier.
	OrderItemId string `json:"OrderItemId"`
	// The name of the item.
	Title *string `json:"Title,omitempty"`
	// The number of items in the order.
	QuantityOrdered int32 `json:"QuantityOrdered"`
	// The number of items shipped.
	QuantityShipped      *int32               `json:"QuantityShipped,omitempty"`
	ProductInfo          *ProductInfoDetail   `json:"ProductInfo,omitempty"`
	PointsGranted        *PointsGrantedDetail `json:"PointsGranted,omitempty"`
	ItemPrice            *Money               `json:"ItemPrice,omitempty"`
	ShippingPrice        *Money               `json:"ShippingPrice,omitempty"`
	ItemTax              *Money               `json:"ItemTax,omitempty"`
	ShippingTax          *Money               `json:"ShippingTax,omitempty"`
	ShippingDiscount     *Money               `json:"ShippingDiscount,omitempty"`
	ShippingDiscountTax  *Money               `json:"ShippingDiscountTax,omitempty"`
	PromotionDiscount    *Money               `json:"PromotionDiscount,omitempty"`
	PromotionDiscountTax *Money               `json:"PromotionDiscountTax,omitempty"`
	// A list of promotion identifiers provided by the seller when the promotions were created.
	PromotionIds   []string `json:"PromotionIds,omitempty"`
	CODFee         *Money   `json:"CODFee,omitempty"`
	CODFeeDiscount *Money   `json:"CODFeeDiscount,omitempty"`
	// When true, the item is a gift.
	IsGift *bool `json:"IsGift,omitempty"`
	// The condition of the item as described by the seller.
	ConditionNote *string `json:"ConditionNote,omitempty"`
	// The condition of the item.  Possible values: New, Used, Collectible, Refurbished, Preorder, Club.
	ConditionId *string `json:"ConditionId,omitempty"`
	// The subcondition of the item.  Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, Any, Other.
	ConditionSubtypeId *string `json:"ConditionSubtypeId,omitempty"`
	// The start date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format.
	ScheduledDeliveryStartDate *string `json:"ScheduledDeliveryStartDate,omitempty"`
	// The end date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format.
	ScheduledDeliveryEndDate *string `json:"ScheduledDeliveryEndDate,omitempty"`
	// Indicates that the selling price is a special price that is available only for Amazon Business orders. For more information about the Amazon Business Seller Program, see the [Amazon Business website](https://www.amazon.com/b2b/info/amazon-business).   Possible values: BusinessPrice - A special price that is available only for Amazon Business orders.
	PriceDesignation *string        `json:"PriceDesignation,omitempty"`
	TaxCollection    *TaxCollection `json:"TaxCollection,omitempty"`
	// When true, the product type for this item has a serial number.  Returned only for Amazon Easy Ship orders.
	SerialNumberRequired *bool `json:"SerialNumberRequired,omitempty"`
	// When true, transparency codes are required.
	IsTransparency *bool `json:"IsTransparency,omitempty"`
	// The IOSS number for the marketplace. Sellers shipping to the European Union (EU) from outside of the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale.
	IossNumber *string `json:"IossNumber,omitempty"`
	// The store chain store identifier. Linked to a specific store in a store chain.
	StoreChainStoreId *string `json:"StoreChainStoreId,omitempty"`
	// The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK.
	DeemedResellerCategory *string               `json:"DeemedResellerCategory,omitempty"`
	BuyerInfo              *ItemBuyerInfo        `json:"BuyerInfo,omitempty"`
	BuyerRequestedCancel   *BuyerRequestedCancel `json:"BuyerRequestedCancel,omitempty"`
}

// OrderItemBuyerInfo A single order item's buyer information.
type OrderItemBuyerInfo struct {
	// An Amazon-defined order item identifier.
	OrderItemId         string                     `json:"OrderItemId"`
	BuyerCustomizedInfo *BuyerCustomizedInfoDetail `json:"BuyerCustomizedInfo,omitempty"`
	GiftWrapPrice       *Money                     `json:"GiftWrapPrice,omitempty"`
	GiftWrapTax         *Money                     `json:"GiftWrapTax,omitempty"`
	// A gift message provided by the buyer.
	GiftMessageText *string `json:"GiftMessageText,omitempty"`
	// The gift wrap level specified by the buyer.
	GiftWrapLevel *string `json:"GiftWrapLevel,omitempty"`
}

// OrderItemsBuyerInfoList A single order item's buyer information list with the order ID.
type OrderItemsBuyerInfoList struct {
	// A single order item's buyer information list.
	OrderItems []OrderItemBuyerInfo `json:"OrderItems"`
	// When present and not empty, pass this string token in the next request to return the next response page.
	NextToken *string `json:"NextToken,omitempty"`
	// An Amazon-defined order identifier, in 3-7-7 format.
	AmazonOrderId string `json:"AmazonOrderId"`
}

// OrderItemsInner struct for OrderItemsInner
type OrderItemsInner struct {
	// The unique identifier of the order item.
	OrderItemId *string `json:"orderItemId,omitempty"`
	// The quantity for which to update the shipment status.
	Quantity *int32 `json:"quantity,omitempty"`
}

// OrderItemsList The order items list along with the order ID.
type OrderItemsList struct {
	// A list of order items.
	OrderItems []OrderItem `json:"OrderItems"`
	// When present and not empty, pass this string token in the next request to return the next response page.
	NextToken *string `json:"NextToken,omitempty"`
	// An Amazon-defined order identifier, in 3-7-7 format.
	AmazonOrderId string `json:"AmazonOrderId"`
}

// OrderRegulatedInfo The order's regulated information along with its verification status.
type OrderRegulatedInfo struct {
	// An Amazon-defined order identifier, in 3-7-7 format.
	AmazonOrderId        string               `json:"AmazonOrderId"`
	RegulatedInformation RegulatedInformation `json:"RegulatedInformation"`
	// When true, the order requires attaching a dosage information label when shipped.
	RequiresDosageLabel              bool                             `json:"RequiresDosageLabel"`
	RegulatedOrderVerificationStatus RegulatedOrderVerificationStatus `json:"RegulatedOrderVerificationStatus"`
}

// OrdersList A list of orders along with additional information to make subsequent API calls.
type OrdersList struct {
	// A list of orders.
	Orders []Order `json:"Orders"`
	// When present and not empty, pass this string token in the next request to return the next response page.
	NextToken *string `json:"NextToken,omitempty"`
	// A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. All dates must be in ISO 8601 format.
	LastUpdatedBefore *string `json:"LastUpdatedBefore,omitempty"`
	// A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format.
	CreatedBefore *string `json:"CreatedBefore,omitempty"`
}

type PaymentExecutionDetailItem struct {
	Payment Money `json:"Payment"`
	// A sub-payment method for a COD order.  Possible values:  * COD - Cash On Delivery.  * GC - Gift Card.  * PointsAccount - Amazon Points.
	PaymentMethod string `json:"PaymentMethod"`
}

// PointsGrantedDetail The number of Amazon Points offered with the purchase of an item, and their monetary value.
type PointsGrantedDetail struct {
	// The number of Amazon Points granted with the purchase of an item.
	PointsNumber        *int32 `json:"PointsNumber,omitempty"`
	PointsMonetaryValue *Money `json:"PointsMonetaryValue,omitempty"`
}

// ProductInfoDetail Product information on the number of items.
type ProductInfoDetail struct {
	// The total number of items that are included in the ASIN.
	NumberOfItems *int32 `json:"NumberOfItems,omitempty"`
}

// RegulatedInformation The regulated information collected during purchase and used to verify the order.
type RegulatedInformation struct {
	// A list of regulated information fields as collected from the regulatory form.
	Fields []RegulatedInformationField `json:"Fields"`
}

// RegulatedInformationField A field collected from the regulatory form.
type RegulatedInformationField struct {
	// The unique identifier for the field.
	FieldId string `json:"FieldId"`
	// The name for the field.
	FieldLabel string `json:"FieldLabel"`
	// The type of field.
	FieldType string `json:"FieldType"`
	// The content of the field as collected in regulatory form. Note that FileAttachment type fields will contain a URL to download the attachment here.
	FieldValue string `json:"FieldValue"`
}

// RegulatedOrderVerificationStatus The verification status of the order along with associated approval or rejection metadata.
type RegulatedOrderVerificationStatus struct {
	Status VerificationStatus `json:"Status"`
	// When true, the regulated information provided in the order requires a review by the merchant.
	RequiresMerchantAction bool `json:"RequiresMerchantAction"`
	// A list of valid rejection reasons that may be used to reject the order's regulated information.
	ValidRejectionReasons []RejectionReason `json:"ValidRejectionReasons"`
	RejectionReason       *RejectionReason  `json:"RejectionReason,omitempty"`
	// The date the order was reviewed. In ISO 8601 date time format.
	ReviewDate *string `json:"ReviewDate,omitempty"`
	// The identifier for the order's regulated information reviewer.
	ExternalReviewerId *string `json:"ExternalReviewerId,omitempty"`
}

// RejectionReason The reason for rejecting the order's regulated information. Not present if the order isn't rejected.
type RejectionReason struct {
	// The unique identifier for the rejection reason.
	RejectionReasonId string `json:"RejectionReasonId"`
	// The description of this rejection reason.
	RejectionReasonDescription string `json:"RejectionReasonDescription"`
}

// ShipmentStatus The shipment status to apply.
type ShipmentStatus string

// List of ShipmentStatus
const (
	ShipmentReadyForPickup ShipmentStatus = "ReadyForPickup"
	ShipmentPickedUp       ShipmentStatus = "PickedUp"
	ShipmentRefusedPickup  ShipmentStatus = "RefusedPickup"
)

// AllowedShipmentStatusEnumValues are all allowed values of ShipmentStatus enum
var AllowedShipmentStatusEnumValues = []ShipmentStatus{
	"ReadyForPickup",
	"PickedUp",
	"RefusedPickup",
}

func (v *ShipmentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShipmentStatus(value)
	for _, existing := range AllowedShipmentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShipmentStatus", value)
}

// TaxClassification The tax classification for the order.
type TaxClassification struct {
	// The type of tax.
	Name *string `json:"Name,omitempty"`
	// The buyer's tax identifier.
	Value *string `json:"Value,omitempty"`
}

// TaxCollection Information about withheld taxes.
type TaxCollection struct {
	// The tax collection model applied to the item.
	Model *string `json:"Model,omitempty"`
	// The party responsible for withholding the taxes and remitting them to the taxing authority.
	ResponsibleParty *string `json:"ResponsibleParty,omitempty"`
}

// UpdateShipmentStatusErrorResponse The error response schema for the UpdateShipmentStatus operation.
type UpdateShipmentStatusErrorResponse struct {
	// A list of error responses returned when a request is unsuccessful.
	Errors []apis.Error `json:"errors,omitempty"`
}

// UpdateShipmentStatusRequest The request body for the updateShipmentStatus operation.
type UpdateShipmentStatusRequest struct {
	// The unobfuscated marketplace identifier.
	MarketplaceId  string         `json:"marketplaceId"`
	ShipmentStatus ShipmentStatus `json:"shipmentStatus"`
	// For partial shipment status updates, the list of order items and quantities to be updated.
	OrderItems []OrderItemsInner `json:"orderItems,omitempty"`
}

// UpdateVerificationStatusErrorResponse The error response schema for the UpdateVerificationStatus operation.
type UpdateVerificationStatusErrorResponse struct {
	// A list of error responses returned when a request is unsuccessful.
	Errors []apis.Error `json:"errors,omitempty"`
}

// UpdateVerificationStatusRequest The request body for the updateVerificationStatus operation.
type UpdateVerificationStatusRequest struct {
	RegulatedOrderVerificationStatus UpdateVerificationStatusRequestBody `json:"regulatedOrderVerificationStatus"`
}

// UpdateVerificationStatusRequestBody The updated values of the VerificationStatus field.
type UpdateVerificationStatusRequestBody struct {
	Status VerificationStatus `json:"status"`
	// The identifier for the order's regulated information reviewer.
	ExternalReviewerId string `json:"externalReviewerId"`
	// The unique identifier for the rejection reason used for rejecting the order's regulated information. Only required if the new status is rejected.
	RejectionReasonId *string `json:"rejectionReasonId,omitempty"`
}

// VerificationStatus The verification status of the order.
type VerificationStatus string

// List of VerificationStatus
const (
	VerificationPending   VerificationStatus = "Pending"
	VerificationApproved  VerificationStatus = "Approved"
	VerificationRejected  VerificationStatus = "Rejected"
	VerificationExpired   VerificationStatus = "Expired"
	VerificationCancelled VerificationStatus = "Cancelled"
)

// AllowedVerificationStatusEnumValues are all allowed values of VerificationStatus enum
var AllowedVerificationStatusEnumValues = []VerificationStatus{
	"Pending",
	"Approved",
	"Rejected",
	"Expired",
	"Cancelled",
}

func (v *VerificationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VerificationStatus(value)
	for _, existing := range AllowedVerificationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VerificationStatus", value)
}

// OrderStatus The verification status of the order.
type OrderStatus string

const (
	// OrderPendingAvailability is available for pre-orders only.
	// The order has been placed, payment has not been authorized, and the release date of the item is in the future.
	OrderPendingAvailability OrderStatus = "PendingAvailability"
	// OrderPending the order has been placed but payment has not been authorized.
	OrderPending OrderStatus = "Pending"
	// OrderUnshipped payment has been authorized and the order is ready for shipment, but
	// no items in the order have been shipped.
	OrderUnshipped OrderStatus = "Unshipped"
	// OrderPartiallyShipped one or more, but not all, items in the order have been shipped.
	OrderPartiallyShipped OrderStatus = "PartiallyShipped"
	// OrderShipped All items in the order have been shipped.
	OrderShipped OrderStatus = "Shipped"
	// OrderInvoiceUnconfirmed all items in the order have been shipped.
	// The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.
	OrderInvoiceUnconfirmed OrderStatus = "InvoiceUnconfirmed"
	// OrderCanceled the order has been canceled.
	OrderCanceled OrderStatus = "Canceled"
	// OrderUnfulfillable the order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.
	OrderUnfulfillable OrderStatus = "Unfulfillable"
)

func (s *OrderStatus) String() string {
	return string(*s)
}

type FulfillmentChannel string

const (
	FulfillmentByAmazon FulfillmentChannel = "AFN"
	FulfillmentBySeller FulfillmentChannel = "MFN"
)

type PaymentMethod string

const (
	PaymentMethodCOD   PaymentMethod = "COD"
	PaymentMethodCVS   PaymentMethod = "CVS"
	PaymentMethodOther PaymentMethod = "Other"
)

type GetOrdersFilter struct {
	// CreateAfter a date used for selecting orders created after (or at) a specified time.
	// Only orders placed after the specified time are returned.
	// Either the CreatedAfter parameter or the LastUpdatedAfter parameter is required.
	// Both cannot be empty. The date must be in ISO 8601 format.
	CreateAfter apis.JsonTimeISO8601
	// CreatedBefore a date used for selecting orders created before (or at) a specified time.
	// Only orders placed before the specified time are returned. The date must be in ISO 8601 format.
	CreatedBefore apis.JsonTimeISO8601
	// LastUpdatedAfter a date used for selecting orders that were last updated after (or at) a specified time.
	// An update is defined as any change in order status, including the creation of a new order.
	// Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format.
	LastUpdatedAfter apis.JsonTimeISO8601
	// LastUpdatedBefore a date used for selecting orders that were last updated before (or at) a specified time.
	// An update is defined as any change in order status, including the creation of a new order.
	// Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format.
	LastUpdatedBefore apis.JsonTimeISO8601
	// OrderStatuses a list of OrderStatus values used to filter the results.
	OrderStatuses []OrderStatus
	// MarketplaceIDs a list of MarketplaceId values. Used to select orders that were placed in the
	// specified marketplaces. Max: 50
	MarketplaceIDs []constants.MarketplaceID
	// FulfillmentChannels a list that indicates how an order was fulfilled. Filters the results by fulfillment channel.
	// Possible values: AFN (Fulfillment by Amazon); MFN (Fulfilled by the seller).
	FulfillmentChannels []FulfillmentChannel
	// PaymentMethods a list of payment method values. Used to select orders paid using the specified payment methods.
	// Possible values: COD (Cash on delivery); CVS (Convenience store payment);
	// Other (Any payment method other than COD or CVS).
	PaymentMethods []PaymentMethod
	// BuyerEmail the email address of a buyer. Used to select orders that contain the specified email address.
	BuyerEmail string
	// SellerOrderID an order identifier that is specified by the seller.
	// Used to select only the orders that match the order identifier.
	// If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter,
	// LastUpdatedBefore, and BuyerEmail cannot be specified.
	SellerOrderID string
	// MaxResultsPerPage a number that indicates the maximum number of orders that can be returned per page.
	// Value must be 1 - 100. Default 100.
	MaxResultsPerPage int
	// EasyShipShipmentStatuses a list of EasyShipShipmentStatus values.
	// Used to select Easy Ship orders with statuses that match the specified values.
	// If EasyShipShipmentStatus is specified, only Amazon Easy Ship orders are returned.
	EasyShipShipmentStatuses []EasyShipShipmentStatus
	// ElectronicInvoiceStatuses a list of ElectronicInvoiceStatus values.
	// Used to select orders with electronic invoice statuses that match the specified values.
	ElectronicInvoiceStatuses []ElectronicInvoiceStatus
	// NextToken a string token returned in the response of your previous request.
	NextToken string
	// AmazonOrderIDs a list of AmazonOrderId values.
	// An AmazonOrderId is an Amazon-defined order identifier, in 3-7-7 format. Max: 50
	AmazonOrderIDs []string
	// ActualFulfillmentSupplySourceID denotes the recommended sourceId where the order should be fulfilled from.
	ActualFulfillmentSupplySourceID string
	// IsISPU when true, this order is marked to be picked up from a store rather than delivered.
	IsISPU *bool
	// StoreChainStoreID the store chain store identifier. Linked to a specific store in a store chain.
	StoreChainStoreID string
}

func (f *GetOrdersFilter) GetQuery() url.Values {
	q := url.Values{}

	apis.AddToQueryIfSet(q, "CreatedAfter", f.CreateAfter.String())
	apis.AddToQueryIfSet(q, "CreatedBefore", f.CreatedBefore.String())
	apis.AddToQueryIfSet(q, "LastUpdatedAfter", f.LastUpdatedAfter.String())
	apis.AddToQueryIfSet(q, "LastUpdatedBefore", f.LastUpdatedBefore.String())
	apis.AddToQueryIfSet(q, "LastUpdatedBefore", f.LastUpdatedBefore.String())
	apis.AddToQueryIfSet(q, "OrderStatuses", apis.MapToCommaString[OrderStatus](f.OrderStatuses))
	apis.AddToQueryIfSet(q, "MarketplaceIds", apis.MapToCommaString[constants.MarketplaceID](f.MarketplaceIDs))
	apis.AddToQueryIfSet(q, "FulfillmentChannels", apis.MapToCommaString[FulfillmentChannel](f.FulfillmentChannels))
	apis.AddToQueryIfSet(q, "PaymentMethods", apis.MapToCommaString[PaymentMethod](f.PaymentMethods))
	apis.AddToQueryIfSet(q, "BuyerEmail", f.BuyerEmail)
	apis.AddToQueryIfSet(q, "SellerOrderId", f.SellerOrderID)
	if f.MaxResultsPerPage < 1 || f.MaxResultsPerPage > 100 {
		f.MaxResultsPerPage = 100
	}
	apis.AddToQueryIfSet(q, "MaxResultsPerPage", strconv.Itoa(f.MaxResultsPerPage))
	apis.AddToQueryIfSet(q, "EasyShipShipmentStatuses", apis.MapToCommaString[EasyShipShipmentStatus](f.EasyShipShipmentStatuses))
	apis.AddToQueryIfSet(q, "ElectronicInvoiceStatuses", apis.MapToCommaString[ElectronicInvoiceStatus](f.ElectronicInvoiceStatuses))
	apis.AddToQueryIfSet(q, "NextToken", f.NextToken)
	apis.AddToQueryIfSet(q, "AmazonOrderIds", strings.Join(f.AmazonOrderIDs, ","))
	apis.AddToQueryIfSet(q, "ActualFulfillmentSupplySourceId", f.ActualFulfillmentSupplySourceID)
	if f.IsISPU != nil {
		apis.AddToQueryIfSet(q, "IsISPU", strconv.FormatBool(*f.IsISPU))
	}
	apis.AddToQueryIfSet(q, "StoreChainStoreId", f.StoreChainStoreID)

	return q
}
